{
	"name": "debugpy3",

	// Sets the run context to one level up instead of the .devcontainer folder.
	"context": "..",
	//"build": {
	//	"dockerfile": "Dockerfile",
	//	"context": "..",
	//	"args": { 
	//		// Update 'VARIANT' to pick a Python version: 3, 3.6, 3.7, 3.8, 3.9
	//		"VARIANT": "3.9.0",
	//		// Options
	//		"INSTALL_NODE": "true",
	//		"NODE_VERSION": "lts/*"
	//	}
	//},

	// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.
	"dockerFile": "../Dockerfile",


	// Set *default* container specific settings.json values on container create.
	"settings": { 
		"terminal.integrated.shell.linux": "/bin/bash",
	    "python.pythonPath": "/usr/local/python/bin/python",
		// "python.pythonPath": "/usr/local/python39valgrindwithdebug/bin/python",
		"python.linting.enabled": true,
		"python.linting.pylintEnabled": true,
		"python.formatting.autopep8Path": "/usr/local/py-utils/bin/autopep8",
		"python.formatting.blackPath": "/usr/local/py-utils/bin/black",
		"python.formatting.yapfPath": "/usr/local/py-utils/bin/yapf",
		"python.linting.banditPath": "/usr/local/py-utils/bin/bandit",
		"python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",
		"python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",
		"python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",
		"python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",
		"python.linting.pylintPath": "/usr/local/py-utils/bin/pylint"		


	},
	"forwardPorts": [27704, 27700, 27702],
	"runArgs": [
		"--cap-add", "ALL",
		"--privileged",
			//	"-e", "DISPLAY=${env:DISPLAY}"
				"-e", "DISPLAY=host.docker.internal:0"

	//			"-v", "/tmp/.X11-unix:/tmp/.X11-unix"

		//		"--memory-swap=15g",
		//		 "--oom-kill-disable"
	],
    "containerEnv": {
		// "MY_CONTAINER_VAR": "some-value-here",
		// "MY_CONTAINER_VAR2": "${localEnv:SOME_LOCAL_VAR}"
//		"DISPLAY": "host.docker.internal:0.0"
		"DISPLAY": "host.docker.internal:0"

		// "LIBGL_ALWAYS_INDIRECT": "0",
	},
	"remoteEnv": {
		//"DISPLAY": "host.docker.internal:0.0"
		"DISPLAY": "host.docker.internal:0"

	},


	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"ms-python.python"
	]
	// althosh set,but in the container ,no effect,and pass this info to run contaninter.
	// "runArgs": ["--memory=10g", "--memory-swap=14g", "--oom-kill-disable"]
	// "runArgs": ["--memory=10g", "--memory-swap=15g", "--oom-kill-disable"]


	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Uncomment the next line to run commands after the container is created - for example installing curl.
	// "postCreateCommand": "apt-get update && apt-get install -y curl",

	// Uncomment when using a ptrace-based debugger like C++, Go, and Rust
	// "runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],

	// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker.
	// "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],

	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	// "remoteUser": "vscode"
}

