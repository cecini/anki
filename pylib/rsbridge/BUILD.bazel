load("@io_bazel_rules_rust//rust:rust.bzl", "rust_library", "rust_test")
load("@io_bazel_rules_rust//cargo:cargo_build_script.bzl", "cargo_build_script")
load("@bazel_skylib//lib:selects.bzl", "selects")
load("//rslib:rustfmt.bzl", "rustfmt_fix", "rustfmt_test")

cargo_build_script(
    name = "build_script",
    srcs = ["build.rs"],
)

rust_library(
    name = "rsbridge",
    srcs = ["lib.rs"],
    crate_type = "cdylib",
    rustc_flags = selects.with_or({
        (
            "@io_bazel_rules_rust//rust/platform:x86_64-apple-darwin",
        ): [
            "-Clink-arg=-undefined",
            "-Clink-arg=dynamic_lookup",
            "-Clink-arg=-mmacosx-version-min=10.7",
        ],
        "//conditions:default": [
                   "-Ccodegen-units=256", 
		   "-Cdebug-assertions=yes",
		   "-Cdebuginfo=2", 
		   "-Cforce-frame-pointers=yes" ,
		   "-Cincremental=y",
		   "-Copt-level=0",
		   "-Coverflow-checks=y",
		   "-Cpanic=unwind", 
		   "-Crpath=no" ,
		   "-Clto=no",
		   "-Cforce-unwind-tables=yes",
			],

    }),
    visibility = [
        "//pylib:__subpackages__",
    ],
    deps = [
        ":build_script",
        # use the raze target
        #"//pylib/rsbridge/cargo:pyo3",
	# do need fetch crate??
        # load("@rules_pyo3_repo//cargo:crates.bzl", "rules_pyo3_fetch_remote_crates")
        "@rules_pyo3_repo//:pyo3",	
        "//rslib:anki",
	# not use the Cargo.toml
    ],
)

rustfmt_test(
    name = "format_check",
    srcs = glob([
        "*.rs",
    ]),
)

rustfmt_fix(
    name = "format",
    srcs = glob([
        "*.rs",
    ]),
)
